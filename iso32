#!/usr/bin/env bash

# Vasile needs root privileges and a proper kernel to run

kernelconfig
checkroot

makeisox86 () {
	# create live iso layout
	mkdir -p "$isostagingdirx86"
	mkdir -p "$isobootdirx86"
	mkdir -p "$isoliveosdirx86"
	mkdir -p "$isosupersquashdirx86"
	mkdir -p "$isolivesqfsdirx86"
	# mount && copy our core stage 4 image
	mount -t squashfs "$chrootx86" "$isostagingdirx86"
	rsync -aHAXr --progress "$isostagingx86/" "$isosyncdirx86/"
	cp -avx ""$isosyncdirx86"/boot/"$isokernelnamex86"" ""$isorootdirx86"/boot/vmlinuz"
	# configure portage && give up control for package / desktop environment installation
	isostartx86
	isooverlaysx86
	isobuildsystemx86
	isochrootx86
	isostopx86
	# squash live environment
	mksquashfs "$isosyncdirx86" ""$isosyncdirx86".img" -b 1048576 -comp xz -Xdict-size 100%
	# move our squashed live environment on place
	mv ""$isosyncdirx86".img"  "$isolivesqfsdirx86"
	# squash it again to be detected by dmsquash-live
	mksquashfs "$isosupersquashdirx86" ""$isorootdirx86"/squashfs.img"
	# and again, move our double squashed live environment on place
	mv ""$isorootdirx86"/squashfs.img" "$isoliveosdirx86"
}

bootcorex86 () {
	# configure live bootloader
	git clone https://gitlab.com/rogentos/boot-core.git "$bootcorepath"
	cp -avx "$bootcorefiles" "$isorootdirx86"
}

cleanupisox86 () {
	rm -rf "$isosyncdirx86"
	rm -rf "$bootcorepath"
	rm -rf "$isosupersquashdirx86"
	umount "$isostagingdirx86"
}

main () {
	chrootchecksumx86
	makeisox86
	bootcorex86
	cleanupisox86
}

main
