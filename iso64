#!/usr/bin/env bash

# Vasile needs root privileges and a proper kernel to run

kernelconfig
checkroot

makeisox64 () {
	# create live iso layout
	mkdir -p "$isostagingdirx64"
	mkdir -p "$isobootdirx64"
	mkdir -p "$isoefibootdirx64"
	mkdir -p "$isoliveosdirx64"
	mkdir -p "$isosupersquashdirx64"
	mkdir -p "$isolivesqfsdirx64"
	# mount && copy our core stage 4 image
	mount -t squashfs "$chrootx64" "$isostagingdirx64"
	rsync -aHAXr --progress "$isostagingdirx64/" "$isosyncdirx64/"
	cp -avx ""$isosyncdirx64"/boot/"$isokernelnamex64"" ""$isorootdirx64"/boot/vmlinuz"
	sha256sum ""$isorootdirx64"/boot/vmlinuz" | tee ""$isorootdirx64"/boot/vmlinuz.sha256"
	# configure portage && give up control for package / desktop environment installation
	isostartx64
	isooverlaysx64
	isobuildsystemx64
	isochrootx64
	isostopx64
	# squash live environment
	mksquashfs "$isosyncdirx64" ""$isosyncdirx64".img" -b 1048576 -comp xz -Xdict-size 100%
	sha256sum ""$isosyncdirx64".img" | tee ""$isosyncdirx64".img.sha256"
	# move our squashed live environment on place
	mv ""$isosyncdirx64".img"  "$isosupersquashdirx64"
	# squash it again to be detected by dmsquash-live
	mksquashfs "$isosupersquashdirx64" ""$isorootdirx64"/squashfs.img"
	# and again, move our double squashed live environment on place
	mv ""$isorootdirx64/"squashfs.img" "$isoliveosdirx64"
}

bootcorex64 () {
	# configure live bootloader
	git clone https://gitlab.com/rogentos/boot-core.git "$bootcorepath"
	cp -avx "$bootcorefiles" "$isorootdirx64"
}

cleanupisox64 () {
	rm -rf "$isosyncdirx64"
	rm -rf "$isosupersquashdirx64"
	rm -rf "$bootcorepath"
	umount "$isostagingdirx64"
}

main () {
	chrootchecksumx64
	makeisox64
	bootcorex64
	cleanupisox64
}

main
